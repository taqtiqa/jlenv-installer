#!/bin/bash
# shellcheck disable=SC2034
#
# Usage: jlenv doctor
#
# Summary: Detects common problems in jlenv installation

set -e
[ -n "$JLENV_DEBUG" ] && set -x

indent() {
  sed 's/^/  /'
}

printc() {
  local color_name="color_$1"
  local fmt="$2"
  shift 2

  if [[ $fmt == *"\n" ]]; then
    fmt="${!color_name}${fmt%\\n}${color_reset}\n"
  else
    fmt="${!color_name}${fmt}${color_reset}"
  fi

  printf "%s %s" "$fmt" "$@"
}

if [ -t 1 ]; then
  color_red=$'\e[31m'
  color_green=$'\e[32m'
  color_yellow=$'\e[1;33m'
  color_bright=$'\e[1;37m'
  color_reset=$'\e[0m'
else
  color_red=""
  color_green=""
  color_yellow=""
  color_bright=""
  color_reset=""
fi

warnings=0

if [ "$(uname -s)" = "Darwin" ]; then
  bashrc=".bash_profile"
else
  bashrc=".bashrc"
fi

echo -n "Checking for \`jlenv\` in PATH: "
num_locations="$(type -a jlenv | uniq | wc -l)"
if [ "$num_locations" -eq 0 ]; then
  printc red "not found\n"
  { if [ -x ~/.jlenv/bin/jlenv ]; then
      echo "You seem to have jlenv installed in \`$HOME/.jlenv/bin', but that"
      echo "directory is not present in PATH. Please add it to PATH by configuring"
      echo "your \`~/${bashrc}', \`~/.zshrc', or \`~/.config/fish/config.fish'."
    else
      echo "Please refer to https://jlenv.github.io/jlenv/#installation"
    fi
  } | indent
  exit 1
elif [ "$num_locations" -eq 1 ]; then
  printc green "%s\n" "$(command -v jlenv)"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple jlenv installs in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    type -a jlenv
  } | indent
  echo
  : $((warnings++))
fi

JLENV_ROOT="${JLENV_ROOT:-$(jlenv root)}"

OLDIFS="$IFS"
IFS=:
path=($PATH)
IFS="$OLDIFS"

echo -n "Checking for jlenv shims in PATH: "
shims_dir="${JLENV_ROOT}/shims"
found=""
for dir in "${path[@]}"; do [ "$dir" != "$shims_dir" ] || found=true; done
if [ -n "$found" ]; then
  printc green "OK\n"
else
  printc red "not found\n"
  { echo "The directory \`$shims_dir' must be present in PATH for jlenv to work."
    echo "Please run \`jlenv init' and follow the instructions."
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Checking \`jlenv install' support: "
jlenv_installs="$({ ls "$JLENV_ROOT"/plugins/*/bin/jlenv-install 2>/dev/null || true
                    type -a jlenv-install 2>/dev/null || true
                  } | uniq)"
num_installs="$(wc -l <<<"$jlenv_installs")"
if [ -z "$jlenv_installs" ]; then
  printc red "not found\n"
  { echo "Unless you plan to add Julia versions manually, you should install julia-build."
    echo "Please refer to https://github.com/jlenv/julia-build#installation"
  }
  echo
  : $((warnings++))
elif [ "$num_installs" -eq 1 ]; then
  printc green "$jlenv_installs"
  if [[ $jlenv_installs == "$JLENV_ROOT"/plugins/* ]]; then
    jlenv_install_cmd="${jlenv_installs##*/}"
    jlenv_install_version="$(jlenv "${jlenv_install_cmd#jlenv-}" --version || true)"
  else
    jlenv_install_version="$("$jlenv_installs" --version || true)"
  fi
  printf " (%s)\n" "$jlenv_install_version"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple \`jlenv-install' in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    echo "$jlenv_installs"
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Counting installed Julia versions: "
num_julies="$(jlenv-versions --bare | wc -l)"
if [ "$num_julies" -eq 0 ]; then
  printc yellow "none\n"
  echo "There aren't any Julia versions installed under \`$JLENV_ROOT/versions'." | indent
  [ "$num_installs" -eq 0 ] || {
    echo -n "You can install Julia versions like so: "
    printc bright "jlenv install 1.0.3\n"
  } | indent
else
  printc green "%d versions\n" "$num_julies"
fi

echo -n "Auditing installed plugins: "
OLDIFS="$IFS"
IFS=$'\n'
hooks=$(jlenv hooks exec)
IFS="$OLDIFS"
plugin_broken=0
for hook in "${hooks[@]}"; do
  plugin_name=
  message=
  case "$hook" in
  */"example.bash" )
    plugin_name=jlenv-example
    message="is considered harmful. Please remove the plugin and \`rm -rf \$(jlenv root)/shims && jlenv rehash'."
    ;;
  esac

  if [ -n "$plugin_name" ]; then
    [ "$((plugin_broken++))" -gt 0 ] || printc yellow "warning\n"
    { printc bright "$plugin_name"
      echo " $message"
      echo "  (found in \`${hook}')"
    } | indent
    : $((warnings++))
  fi
done
[ "$plugin_broken" -gt 0 ] || printc green "OK\n"

[ $warnings -eq 0 ]
